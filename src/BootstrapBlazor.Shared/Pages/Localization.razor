@page "/localization"
@inject IStringLocalizer<Localization> Localizer

<h3>@Localizer["Title"]</h3>

<p>
    @((MarkupString)Localizer["P1"].Value)
</p>

<Tips>
    @((MarkupString)Localizer["Tips"].Value)
</Tips>

<p><b>@Localizer["P2"]</b></p>

<p>
    <div>
        @((MarkupString)Localizer["P3D1"].Value)
    </div>
    <div>
        @((MarkupString)Localizer["P3D2"].Value)
    </div>
    <div>
        @((MarkupString)Localizer["P3D3"].Value)
    </div>
</p>

<p><b>@Localizer["P4"]</b></p>

<p><b>Server-Side App</b></p>

<p><b>@Localizer["P5"]</b></p>

<p>@((MarkupString)Localizer["P6"].Value)</p>

<Pre>{
  "BootstrapBlazorOptions": {
    "FallbackCultureName": "en",
    "SupportedCultures": [
      "zh-CN",
      "en-US"
    ]
  }
}
</Pre>

<p><b>@Localizer["P7"]</b></p>
<Pre>public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        // @Localizer["CodeComment1"]
        services.AddBootstrapBlazor();

        // @Localizer["CodeComment2"]
        services.AddRequestLocalization&lt;IOptions&lt;BootstrapBlazorOptions&gt;&gt;((localizerOption, blazorOption) =>
        {
            var supportedCultures = blazorOption.Value.GetSupportedCultures();

            localizerOption.SupportedCultures = supportedCultures;
            localizerOption.SupportedUICultures = supportedCultures;
        });
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        // @Localizer["CodeComment3"]
        app.UseRequestLocalization(app.ApplicationServices.GetService&lt;IOptions&lt;RequestLocalizationOptions&gt;&gt;()!.Value);
    }
}</Pre>

<p><b>@Localizer["P8"]</b></p>
<Pre>[Route("[controller]/[action]")]
public class CultureController : Controller
{
    public IActionResult SetCulture(string culture, string redirectUri)
    {
        if (!string.IsNullOrEmpty(culture))
        {
            HttpContext.Response.Cookies.Append(
                CookieRequestCultureProvider.DefaultCookieName,
                CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture, culture)));
        }

        return LocalRedirect(redirectUri);
    }

    public IActionResult ResetCulture(string redirectUri)
    {
        HttpContext.Response.Cookies.Delete(CookieRequestCultureProvider.DefaultCookieName);

        return LocalRedirect(redirectUri);
    }
}</Pre>

<p><b>@Localizer["P9"]</b></p>
<Pre>@@inherits BootstrapComponentBase
@@inject IOptions&lt;BootstrapBlazorOptions&gt; BootstrapOptions
@@inject NavigationManager NavigationManager
@@inject ICultureStorage CultureStorage

&lt;div @@attributes="@@AdditionalAttributes" class="@@ClassString"&gt;
    &lt;label&gt;请选择语言：&lt;/label&gt;
    &lt;Select Value="@@SelectedCulture" OnSelectedItemChanged="@@SetCulture"&gt;
        &lt;Options&gt;
            @@foreach (var kv in Configuration.GetSupportCultures())
            {
                &lt;SelectOption Text="@@kv.Key" Value="@@kv.Value" /&gt;
            }
        &lt;/Options&gt;
    &lt;/Select&gt;
&lt;/div&gt;

@@code {
    private string? ClassString =&gt; CssBuilder.Default("culture-selector")
        .AddClassFromAttributes(AdditionalAttributes)
        .Build();

    private string SelectedCulture { get; set; } = CultureInfo.CurrentUICulture.Name;

    private async Task SetCulture(SelectedItem item)
    {
        if (CultureStorage.Mode == CultureStorageMode.Webapi)
        {
            // @Localizer["CodeComment4"]
            if (SelectedCulture != item.Value)
            {
                var culture = item.Value;
                var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
                var query = $"?culture={Uri.EscapeDataString(culture)}&redirectUri={Uri.EscapeDataString(uri)}";

                // use a path that matches your culture redirect controller from the previous steps
                NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
            }
        }
        else
        {
            var cultureName = item.Value;
            if (cultureName != CultureInfo.CurrentCulture.Name)
            {
                await JSRuntime.InvokeAsync&lt;string&gt;(identifier: "$.blazorCulture.set", cultureName);
                var culture = new CultureInfo(cultureName);
                CultureInfo.CurrentCulture = culture;
                CultureInfo.CurrentUICulture = culture;

                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
    }
}</Pre>

<p><b>@((MarkupString)Localizer["P10"].Value)</b></p>

<p>
    @((MarkupString)Localizer["P11"].Value)
</p>

<p>
    <div>@Localizer["P12"]</div>

    <ul class="ul-demo mt-3">
        <li>@Localizer["P12Li1"]</li>
        <li>@Localizer["P12Li2"]</li>
        <li>@Localizer["P12Li3"]</li>
        <li>@Localizer["P12Li4"]</li>
    </ul>
</p>

<Pre>public void ConfigureServices(IServiceCollection services)
{
    services.AddBootstrapBlazor(setupAction: options =>
    {
        // @Localizer["CodeComment5"]
        options.ResourceManagerStringLocalizerType = typeof(Program);

        // @Localizer["CodeComment6"]
        options.AdditionalAssemblies = new[] { typeof(BootstrapBlazor.Shared.App).Assembly };

        // @Localizer["CodeComment7"]
        options.AdditionalJsonFiles = new string[]
        {
            @@"D:\Argo\src\BootstrapBlazor\src\BootstrapBlazor.Server\Locales\zh-TW.json",
            @@"D:\Argo\src\BootstrapBlazor\src\BootstrapBlazor.Server\Locales\zh-CN.json"
        };
    });
}
</Pre>

<p><b>Web Assembly</b></p>

<p><b>@Localizer["P13"]</b></p>
<Pre>public static async Task Main(string[] args)
{
    var builder = WebAssemblyHostBuilder.CreateDefault(args);

    builder.RootComponents.Add&lt;App&gt;("app");

    builder.Services.AddTransient(sp =&gt; new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

    // @Localizer["CodeComment8"]
    builder.Services.AddBootstrapBlazor();

    builder.Services.AddSingleton&lt;ICultureStorage, DefaultCultureStorage&gt;();

    builder.Services.Configure&lt;BootstrapBlazorOptions&gt;(op =>
    {
        op.ToastDelay = 4000;
        op.SupportedCultures = new List&lt;string&gt; { "zh-CN", "en-US" };
    });

    var host = builder.Build();

    await GetCultureAsync(host);

    await host.RunAsync();
}

private static async Task GetCultureAsync(WebAssemblyHost host)
{
    var jsRuntime = host.Services.GetRequiredService&lt;IJSRuntime&gt;();
    var cultureName = await jsRuntime.InvokeAsync&lt;string&gt;("$.blazorCulture.get") ?? "zh-CN";
    var culture = new CultureInfo(cultureName);
    CultureInfo.DefaultThreadCurrentCulture = culture;
    CultureInfo.DefaultThreadCurrentUICulture = culture;
}

internal class DefaultCultureStorage : ICultureStorage
{
    public CultureStorageMode Mode { get; set; } = CultureStorageMode.LocalStorage;
}
</Pre>

<p><b>@Localizer["P14"]</b></p>

<p>@Localizer["P15"]</p>

<p id="lang"><b>@Localizer["P16"]</b></p>

<Pre>public static async Task Main(string[] args)
{
    // @Localizer["CodeComment10"]
    CultureInfo.CurrentCulture = new CultureInfo("zh-CN");
    CultureInfo.CurrentUICulture = new CultureInfo("zh-CN");

    // ...

    var host = builder.Build();

    await GetCultureAsync(host);

    await host.RunAsync();
}
</Pre>

<Video Name="localizer" />
